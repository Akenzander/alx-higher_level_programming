#include "lists.h"

/**
  * insert_node - Inserts a number into a sorted singly-linked list.
  * @head: A pointer the head of the linked list.
  * @number: The number to insert.
  *
  * Return: If the function fails - NULL.
  *	Otherwise - a pointer to the new node.
  */
listint_t *insert_node(listint_t **head, int number)
{

	listint_t *node = *head, *new;

	new = malloc(sizeof(listint_t));
	if (new == NULL)
		return (NULL);
	new->n = number;

	if (node == NULL || node->n >= number)
	{

		new->next = node;
		*head = new;
		return (new);

	}

	while (node && node->next && node->next->n < number)
		node = node->next;

	new->next = node->next;
	node->next = new;
	return (new);
#include <stdlib.h>

#include <string.h>

#include <stdio.h>

#include "lists.h"



/**

   * main - check the code for

    *

     * Return: Always 0.

      */

int main(void)

{

	    listint_t *head;



	        head = NULL;

		    add_nodeint_end(&head, 0);

		        add_nodeint_end(&head, 1);

			    add_nodeint_end(&head, 2);

			        add_nodeint_end(&head, 3);

				    add_nodeint_end(&head, 4);

				        add_nodeint_end(&head, 98);

					    add_nodeint_end(&head, 402);

					        add_nodeint_end(&head, 1024);

						    print_listint(head);



						        printf("-----------------\n");



							    insert_node(&head, 27);



							        print_listint(head);



								    free_listint(head);



								        return (0);

}}
